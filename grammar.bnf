program         → declaration* EOF ;

declaration     → classDecl
                | funDecl
                | varDecl
                | statement ;

classDecl       → "class" IDENTIFIER "{" function* "}" ;
funDecl         → "fun" function ;
varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
statement       → exprStmt
                | forStmt
                | ifStmt
                | printStmt
                | breakStmt
                | continueStmt
                | returnStmt
                | whileStmt
                | block ;

exprStmt        → expression ";" ;
function        → IDENTIFIER "(" parameters? ")" block ;
parameters      → IDENTIFIER ( "," IDENTIFIER )* ;
forStmt         → "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
ifStmt          → "if" "(" expression ")" statement ( "else" statement )? ;
printStmt       → "print" expression ";" ;
breakStmt       → "break" ";" ;
continueStmt    → "continue" ";" ;
returnStmt      → "return" expression? ";" ;
whileStmt       → "while" "(" expression ")" statement ;
block           → "{" declaration* "}" ;

expression      → assignment ;
assignment      → identifier "=" assignment
                | logic_or ;

logic_or        → logic_and ( "or" logic_and )* ;
logic_and       → equality ( "and" equality )* ;
equality        → comparison ( ( "!=" | "==" ) comparison )* ;
comparison      → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition        → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication  → unary ( ( "/" | "*" ) unary )* ;
unary           → ( "!" | "-" ) unary | call ;
call            → primary ( "(" arguments? ")" )* ;

arguments       → expression ( "," expression )* ;
primary         → "true" | "false" | "nil"
                | NUMBER | STRING
                | "(" expression ")"
                | IDENTIFIER ;